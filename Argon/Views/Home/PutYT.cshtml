<div class="container mt-5">
    <div class="card shadow border-0">
        <div class="card-header bg-gradient-primary text-white">
            <h3 class="mb-0">Inf əlavə et</h3>
        </div>
        <div class="card-body">
            <form id="categoryForm" method="post" action="" enctype="multipart/form-data">
                <div class="mb-3">
                    <label for="videoTitle" class="form-label">Video Başlığı</label>
                    <input type="text" class="form-control" id="videoTitle" name="videoTitle" required placeholder="Video Başlığı">
                </div>

                <div class="mb-3">
                    <label for="videoUrl" class="form-label">Video URL</label>
                    <input type="text" class="form-control" id="videoUrl" name="videoUrl" required placeholder="Video URL">
                </div>
                <div class="mb-3">
                    <label for="videoDate" class="form-label">Video Yayın Tarihi</label>
                    <input type="date" class="form-control" id="videoDate" name="videoDate">
                </div>
                <div class="mb-3">
                    <label for="videoStatus" class="form-label">Video Durumu</label>
                    <select id="videoStatus" name="videoStatus">
                        <option value="1">Aktiv</option>
                        <option value="0">DeAktiv</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary w-100">Ekle</button>
            </form>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
         document.addEventListener("DOMContentLoaded", function() {
        // Extract 'id' from the URL
        const path = window.location.pathname;
        const id = path.split('/').pop(); // Extract the last part as ID
        console.log("ID: ", id); // Check the extracted ID

        // Fetch the data for the video and pre-fill the form
        fetch(`https://localhost:44314/api/Youtube/video/${id}`)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                if (data) {
                    document.getElementById("videoTitle").value = data.videoTitle;
                    document.getElementById("videoUrl").value = data.videoUrl;

                    // Handle videoDate correctly (assuming it's in 'yyyy-MM-dd' format)
                    if (data.videoDate) {
                        document.getElementById("videoDate").value = data.videoDate.split('T')[0];  // Format as yyyy-MM-dd
                    } else {
                        document.getElementById("videoDate").value = ''; // Leave empty if no videoDate
                    }

                    // Set videoStatus, converting boolean to string '1' or '0'
                    document.getElementById("videoStatus").value = data.videoStatus ? "1" : "0";
                }
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Bir hata oluştu',
                    text: error.message || 'API çağrısı sırasında bir sorun oluştu.'
                });
            });

        // Form submit handler
        document.getElementById("categoryForm").addEventListener("submit", function(event) {
            event.preventDefault(); // Prevent the default form submission

            // Create FormData object
            const formData = new FormData(this);

            // Send the FormData to the server
            fetch(`https://localhost:44314/api/Youtube/put/${id}`, {
                method: 'PUT',
                body: formData // Send FormData as body
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    return Promise.reject('API çağrısı başarısız oldu!');
                }
            })
            .then(result => {
                Swal.fire({
                    icon: 'success',
                    title: 'Başarılı!',
                    text: result.Message || 'Video başarıyla güncellendi.'
                });
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Bir hata oluştu',
                    text: error || 'API çağrısı sırasında bir sorun oluştu.'
                });
            });
        });
    });


</script>
